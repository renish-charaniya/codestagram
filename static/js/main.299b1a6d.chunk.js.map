{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["require","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.299b1a6d.chunk.js","sourcesContent":["import firebase from 'firebase';\nrequire('dotenv').config();\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: \"codestagram-b027c.firebaseapp.com\",\n    databaseURL: \"https://codestagram-b027c.firebaseio.com\",\n    projectId: \"codestagram-b027c\",\n    storageBucket: \"codestagram-b027c.appspot.com\",\n    messagingSenderId: \"615032423044\",\n    appId: \"1:615032423044:web:7cb034332583eaa585b8d1\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db=firebase.firestore();\nconst auth=firebase.auth();\nconst storage=firebase.storage();\n\nexport {db,auth,storage};","import React, { useState,useEffect } from 'react';\nimport './Post.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from './firebase';\nimport firebase from 'firebase';\n\nfunction Post({postId,user,username,caption,imageUrl}) {\n    const [comments,setComments]=useState([]);\n    const [comment,setComment]=useState('');\n\n    useEffect(()=>{\n        let unsubscribe;\n        if(postId){\n            unsubscribe=db\n            .collection(\"posts\")\n            .doc(postId)\n            .collection(\"comments\")\n            .orderBy('timestamp','desc')\n            .onSnapshot((snapshot)=>{\n                setComments(snapshot.docs.map((doc)=>doc.data()));\n            });\n        }\n        return()=>{\n            unsubscribe();\n        };\n    },[postId]);\n\n    const postComment=(event)=>{\n        event.preventDefault();\n\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n            text:comment,\n            username:user.displayName,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        });\n        setComment('');\n    }\n    \n\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\">\n            <Avatar\n                className=\"post__avatar\"\n                alt='Renish Charaniya'\n                src=\"/static/images/avatar/1.jpg\"\n            />\n            <h3>{username}</h3> \n            </div>\n            \n            \n\n            <img className=\"post__image\" src={imageUrl} alt=\"post\" />    \n            \n            <h4 className=\"post__text\"><strong>{username}:</strong>{caption}</h4>\n\n            <div className=\"post__comments\">\n                {comments.map((comment)=>(\n                    <p>\n                        <b>{comment.username}</b> {comment.text}\n                    </p>\n                ))}\n            </div>\n\n            {user && (\n                <form className=\"post__commentBox\">\n                <input\n                    className=\"post__input\"\n                    type=\"text\"\n                    placeholder=\"Add a comment..\"\n                    value={comment}\n                    onChange={(e)=>setComment(e.target.value)} \n                />\n\n                <button\n                    className=\"post__button\"\n                    disabled={!comment}\n                    type=\"submit\"\n                    onClick={postComment}\n                >Post\n                </button>\n\n            </form>\n            )}\n        </div>\n    )\n}\n\nexport default Post\n","import React,{useState} from 'react';\nimport {Button} from \"@material-ui/core\";\nimport firebase from \"firebase\";\nimport {storage,db} from \"./firebase\";\nimport './ImageUpload.css';\n\nfunction ImageUpload({username}) {\n    const [image,setImage]=useState(null);\n    const [progress,setProgress]=useState(0);\n    const [caption,setCaption]=useState('');\n    \n    const handleChange=(e)=>{\n        if(e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    };\n\n    const handleUpload=()=>{\n        const uploadTask=storage.ref(`images/${image.name}`).put(image);\n        uploadTask.on(\n            \"state_changed\",\n            (snapshot)=>{\n                //progress logic...\n                const progress=Math.round(\n                (snapshot.bytesTransferred/snapshot.totalBytes)*100);\n                setProgress(progress);\n            },\n            (error)=>{\n                console.log(error);\n                alert(error.message);\n            },\n            ()=>{\n                //complete function...\n                storage\n                .ref(\"images\")\n                .child(image.name)\n                .getDownloadURL()\n                .then(url=>{\n                    //post image inside db\n                    db.collection(\"posts\").add({\n                        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n                        caption:caption,\n                        imageUrl:url,\n                        username:username\n                    });\n                    setProgress(0);\n                    setCaption(\"\");\n                    setImage(null);\n\n                });\n            }\n        );\n\n    };\n    return (\n        <div className=\"imageupload\">\n           <progress className=\"imageupload__progress\" value={progress} max=\"100\"/> \n           <input type=\"text\" placeholder='Enter a caption' onChange={event=>setCaption(event.target.value)} value={caption} />\n           <input type=\"file\" onChange={handleChange}/>\n           <Button className=\"imageupload__button\" onClick={handleUpload}>\n                Upload \n            </Button> \n        </div>\n    )\n}\n\nexport default ImageUpload\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Post from './Post';\nimport {db,auth} from './firebase'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport {Button,Input} from '@material-ui/core'\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes=useStyles();\n  const [modalStyle]=useState(getModalStyle);\n  const [posts,setPosts]=useState([]);\n  const [open,setOpen]=useState(false);\n  const [openSignIn,setOpenSignIn]=useState(false);\n  const [username,setUsername]=useState('');\n  const [email,setEmail]=useState('');\n  const [password,setPassword]=useState('');\n  const [user,setUser]=useState(null);\n\n    useEffect(()=>{\n      const unsubscribe=auth.onAuthStateChanged((authUser)=>{\n        if(authUser){\n          //user has logged in..\n          console.log(authUser);\n          setUser(authUser);\n\n          \n        }else{\n          //user has logged out...\n          setUser(null);\n        }\n      })\n      return()=>{\n        //perform some cleanup actions\n        unsubscribe();\n      }\n    },[user,username]);\n    //useEffect ->runs a piece of code based on a specific conditions\n    useEffect(() => {\n      db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot=>{\n        setPosts(snapshot.docs.map(doc=>({\n          id:doc.id,\n          post:doc.data()\n        })));\n      })\n      \n    }, [])\n\n    const signUp=(event)=>{\n      event.preventDefault();\n      \n      auth.createUserWithEmailAndPassword(email,password)\n      .then((authUser)=>{\n        authUser.user.updateProfile({\n          displayName:username\n        })\n      })\n      .catch((error)=>alert(error.message))\n\n      setOpen(false);\n    }\n\n    const signIn=(event)=>{\n      event.preventDefault();\n\n      auth\n      .signInWithEmailAndPassword(email,password)\n      .catch((error)=>alert(error.message))\n\n      setOpenSignIn(false);\n    }\n    return (\n    <div className=\"App\">\n      \n      <Modal\n        open={open}\n        onClose={()=>setOpen(false)}\n        \n      >\n         <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n            <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n            />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              \n              value={username}\n              onChange={(e)=>setUsername(e.target.value)}\n              \n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e)=>setEmail(e.target.value)}\n              \n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e)=>setPassword(e.target.value)}\n              \n            />\n            <Button type=\"submit\" onClick={signUp}>Sign-Up</Button>\n            \n          </form>\n         \n        </div>\n      </Modal>\n\n        {/* Modal for signIn */}\n      <Modal\n        open={openSignIn}\n        onClose={()=>setOpenSignIn(false)}\n        \n      >\n         <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n            <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n            />\n            </center>\n          \n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e)=>setEmail(e.target.value)}\n              \n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e)=>setPassword(e.target.value)}\n              \n            />\n            <Button type=\"submit\" onClick={signIn}>Sign-In</Button>\n            \n          </form>\n         \n        </div>\n      </Modal>\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user ? (\n        <Button onClick={()=>auth.signOut()}>Logout</Button>\n        \n        ):(\n        <div className=\"app__loginContainer\">\n          <Button onClick={()=>setOpenSignIn(true)}>Sign-In</Button>\n          <Button onClick={()=>setOpen(true)}>Sign-up</Button>\n        </div>\n        )}\n      </div>\n       \n      <div className=\"app__posts\"> \n        <div className=\"app__postsLeft\">\n          {\n            posts.map(({id,post})=>(\n              <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n            ))\n          }\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n              url='https://www.instagram.com/p/CD7bCpHAFsa/?utm_source=ig_web_copy_link'\n              maxWidth={320}\n              hideCaption={false}\n              containerTagName='div'\n              protocol=''\n              injectScript\n              onLoading={() => {}}\n              onSuccess={() => {}}\n              onAfterRender={() => {}}\n              onFailure={() => {}}\n          />\n        </div>\n          \n      </div>\n\n      {user?.displayName ?(\n          <ImageUpload username={user.displayName}/>\n          ): (\n          <h3>Sorry you need to login to upload</h3>\n          )}\n      \n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}